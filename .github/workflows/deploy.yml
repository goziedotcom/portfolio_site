# Deploy Jaspr SPA to GitHub Pages
name: Deploy Jaspr App to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and deploy job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.0'
          channel: 'stable'
        
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: '3.7.0'
          
      - name: Install dependencies
        run: dart pub get
        
      - name: Create API keys file from secrets
        run: |
          mkdir -p lib/services/remote
          cat > lib/services/remote/api_keys.dart << EOF
          const GITHUB_TOKEN = "${{ secrets.GH_TOKEN }}";
          const GITHUB_OWNER = "${{ secrets.GH_OWNER }}";
          const GITHUB_REPO = "${{ secrets.GH_REPO }}";
          EOF
        
      - name: Build Jaspr app
        run: dart run build_runner build web --delete-conflicting-outputs
        
      - name: Create SPA routing files
        run: |
          # Create 404.html for SPA routing
          cat > build/web/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Redirecting...</title>
              <script>
                  var segmentCount = 0;
                  var l = window.location;
                  l.replace(
                      l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
                      '/?p=/' + l.pathname.slice(1).split('/').slice(segmentCount).join('/').replace(/&/g, '~and~') +
                      (l.search ? '&q=' + l.search.slice(1).replace(/&/g, '~and~') : '') +
                      l.hash
                  );
              </script>
          </head>
          <body></body>
          </html>
          EOF
          
          # Create .nojekyll to disable Jekyll processing
          touch build/web/.nojekyll
          
          # Create CNAME file (replace with your domain)
          echo "yourdomain.com" > build/web/CNAME
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the built web directory
          path: 'build/web'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4