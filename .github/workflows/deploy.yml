# Deploy Jaspr SPA to GitHub Pages
name: Deploy Jaspr App to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and deploy job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
        
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: '3.8.0'
          
      - name: Install dependencies
        run: dart pub get
        
      - name: Install Tailwind CSS standalone CLI (v3.4.1)
        run: |
          curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-linux-x64
          chmod +x tailwindcss-linux-x64
          sudo mv tailwindcss-linux-x64 /usr/local/bin/tailwindcss
          # Verify installation
          tailwindcss --help | head -5
        
      - name: Prepare web directory for Tailwind
        run: |
          chmod -R 755 web/
          ls -la web/
        
      - name: Create API keys file from secrets
        run: |
          mkdir -p lib/services/remote
          cat > lib/services/remote/api_keys.dart << EOF
          const GITHUB_TOKEN = "${{ secrets.GH_TOKEN }}";
          const GITHUB_OWNER = "${{ secrets.GH_OWNER }}";
          const GITHUB_REPO = "${{ secrets.GH_REPO }}";
          EOF
          
      - name: Activate Jaspr CLI
        run: dart pub global activate jaspr_cli
        
      - name: Build Jaspr app
        run: jaspr build --verbose
        
      - name: Create deployment files
        run: |
          # Copy index.html as 404.html so SPA can handle routing
          cp build/jaspr/index.html build/jaspr/404.html
          
          # Create .nojekyll to disable Jekyll processing
          touch build/jaspr/.nojekyll
          
          # Create CNAME file
          echo "gozieihejirika.com" > build/jaspr/CNAME
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the built jaspr directory
          path: 'build/jaspr'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4